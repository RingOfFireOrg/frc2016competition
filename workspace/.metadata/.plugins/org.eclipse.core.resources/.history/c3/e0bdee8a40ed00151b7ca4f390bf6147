package org.usfirst.frc.team3459.robot;	

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SampleRobot;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

public class Robot extends SampleRobot {
	DriveTrain driveTrain;
	Joystick leftStick;
	Joystick rightStick;

	Joystick controlStick;
	JoystickButton fireB;
	JoystickButton shootUpB;
	JoystickButton shootDownB;
	JoystickButton intakeB;
	JoystickButton disableB;

	JoystickButton upB;
	JoystickButton downB;

	JoystickButton motorInB;
	JoystickButton motorOutB;
	
	JoystickButton overRide;
	
	Shooter shooter;
	
	ShooterMap stateMap;
	
	PiClient myPi = new PiClient();
	
	public Robot() {
		driveTrain = new DriveTrain(
				new RobotDrive(0, 1), 
				new Encoder(0, 1),
				new Encoder(2, 3)
			);
		leftStick = new Joystick(0);
		rightStick = new Joystick(1);

		controlStick = new Joystick(2);
		fireB = new JoystickButton(controlStick, 1);
//		shootUpB = new JoystickButton(controlStick, 5);
//		shootDownB = new JoystickButton(controlStick, 3);
//		intakeB = new JoystickButton(controlStick, 4);
//		disableB = new JoystickButton(controlStick, 2);
//
//		upB = new JoystickButton(controlStick, 11);
//		downB = new JoystickButton(controlStick, 12);
//		
//		motorInB = new JoystickButton(controlStick, 9);
//		motorOutB = new JoystickButton(controlStick, 10);
		
		overRide = new JoystickButton(controlStick, 7);

		shooter = new Shooter(14, 11, 3, 0, 1);
		stateMap = new ShooterMap(shooter,controlStick);
	}

	public void autonomous() {
		double base = 0.60;
		double rightFactor = 1.00;
		long start = System.currentTimeMillis();
		long elapsed;
		long t1 = 14000;
		
		while(isAutonomous() && isEnabled()) {
			elapsed = System.currentTimeMillis() - start;
			
			if(elapsed < t1) {
				driveTrain.tankDrive(base,base*rightFactor);
			} else {
				driveTrain.tankDrive(0, 0);	
			}
			driveTrain.update();
		}
		driveTrain.tankDrive(0, 0);
		driveTrain.update(); 
	}

	public void operatorControl() {
		while (isOperatorControl() && isEnabled()) {
			driveTrain.tankDrive(-leftStick.getY(), -rightStick.getY());
			driveTrain.update();
			driveTrain.printEncoders();
			
//			updateShooter();
//			updateShooter2();
			shooter.update();
			stateMap.update();

			Timer.delay(0.005);
		}
		shooter.setState(Shooter.State.DISABLE);
	}

	public void updateShooter() {
		shooter.update();

		if (fireB.get()) {
			shooter.fire();
		}

		int buttonsPressed = (shootUpB.get() ? 1 : 0)
				+ (shootDownB.get() ? 1 : 0) + (intakeB.get() ? 1 : 0)
				+ (disableB.get() ? 1 : 0) + (upB.get() ? 1 : 0)
				+ (downB.get() ? 1 : 0);

		if (buttonsPressed > 1) {
			return;
		}

		if (shootUpB.get()) {
			shooter.setState(Shooter.State.SHOOTUP);
		}
		if (shootDownB.get()) {
			shooter.setState(Shooter.State.SHOOTDOWN);
		}
		if (intakeB.get()) {
			shooter.setState(Shooter.State.INTAKE);
		}
		if (disableB.get()) {
			shooter.setState(Shooter.State.DISABLE);
		}
		if (upB.get()) {
			shooter.setState(Shooter.State.UP);
		}
		if (downB.get()) {
			shooter.setState(Shooter.State.DOWN);
		}
	}

	public void updateShooter2() {
		shooter.update();
		
		if (fireB.get()) {  //user said fire
//			if(shooter.getState() == Shooter.State.SHOOTUP) { //machine ready to fire
//				if(overRide.get()) {
//					shooter.fire();
//		 	    } else if (myPi.retrieveTargetingState()) {
//				    shooter.fire();
//			    }
//			} else {
				shooter.fire();
//			}
		}

		int buttonsPressed = (shootUpB.get() ? 1 : 0) + (shootDownB.get() ? 1 : 0) 
				+ (intakeB.get() ? 1 : 0) + (disableB.get() ? 1 : 0) 
				+ (upB.get() ? 1 : 0) + (downB.get() ? 1 : 0) 
				+ (motorInB.get() ? 1 : 0) + (motorOutB.get() ? 1 : 0);

		if (buttonsPressed > 1) {
			return;
		}

		if (shootUpB.get()) {
			shooter.setState(Shooter.State.SHOOTUP);
		}
		if (shootDownB.get()) {
			shooter.setState(Shooter.State.SHOOTDOWN);
		}
		if (intakeB.get()) {
			shooter.setState(Shooter.State.INTAKE);
		}
		if (disableB.get()) {
			shooter.setState(Shooter.State.DISABLE);
		}
		if (upB.get()) {
			shooter.setState(Shooter.State.UP);
		}
		if (downB.get()) {
			shooter.setState(Shooter.State.DOWN);
		}
		if (motorInB.get()) {
			shooter.setState(Shooter.State.MOTOR_IN);
		}
		if (motorOutB.get()) {
			shooter.setState(Shooter.State.MOTOR_OUT);
		}
	}
}
